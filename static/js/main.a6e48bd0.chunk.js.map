{"version":3,"sources":["components/Header/Header.jsx","components/Error/Error.jsx","components/ContractBasedAccounts/ContractBasedAccounts.jsx","components/Filter/Filter.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","_ref","onHelp","react_default","a","createElement","index_es","container","direction","alignItems","spacing","item","variant","aria-label","color","onClick","Help_default","withStyles","theme","createStyles","errorText","fontFamily","classes","error","component","className","id","mode","JSON","stringify","undefined","StyledContractBasedAccount","actionArea","maxWidth","textOverflow","overflow","title","marginTop","unit","_ref2","contractBasedAccounts","length","map","contractBasedAccount","Object","assign","key","StyledFilter","orderBySelect","marginLeft","onToggleWithName","onToggleWithImage","onOrderBy","withName","withImage","orderBy","control","checked","onChange","event","label","value","target","labelPlacement","client","ApolloClient","uri","process","cache","InMemoryCache","GRAVATARS_QUERY","gql","_templateObject","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleHelpDialog","setState","state","objectSpread","showHelpDialog","gotoQuickStartGuide","window","location","href","_this2","_this$state","react_apollo_esm","components_Header_Header","components_Filter_Filter","field","query","variables","where","data","loading","style","width","components_Error_Error","components_ContractBasedAccounts_ContractBasedAccounts","fullScreen","open","onClose","aria-labelledby","autoFocus","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a6e48bd0.chunk.js","sourcesContent":["import React from 'react'\nimport { Grid, Typography, IconButton } from '@material-ui/core'\nimport HelpIcon from '@material-ui/icons/Help'\n\nconst Header = ({ onHelp }) => (\n  <Grid container direction=\"row\" alignItems=\"center\" spacing={16}>\n    <Grid item>\n      <Typography variant=\"title\">\n        Contract-Based Account Tracker by Tasit\n      </Typography>\n    </Grid>\n    <Grid item>\n      <IconButton\n        aria-label=\"Delete\"\n        color=\"secondary\"\n        onClick={() => onHelp && onHelp()}\n      >\n        <HelpIcon />\n      </IconButton>\n    </Grid>\n  </Grid>\n)\n\nexport default Header\n","import React from 'react'\nimport { Grid, Typography, createStyles, withStyles } from '@material-ui/core'\n\nconst errorStyles = theme =>\n  createStyles({\n    errorText: {\n      fontFamily: 'Inconsolata, Monaco, monospace',\n    },\n  })\n\nconst Error = ({ classes, error }) => (\n  <Grid container direction=\"column\">\n    <Grid item>\n      <Typography variant=\"h6\" component=\"h3\" className={classes.id}>\n        Error\n      </Typography>\n    </Grid>\n    <Grid item>\n      <Grid container>\n        <Typography mode=\"paragraph\" color=\"secondary\">\n          <pre className={classes.errorText}>\n            {JSON.stringify(error, undefined, 2)}\n          </pre>\n        </Typography>\n      </Grid>\n    </Grid>\n  </Grid>\n)\n\nexport default withStyles(errorStyles)(Error)\n","import React from 'react'\nimport {\n  Card,\n  CardContent,\n  CardActionArea,\n  Grid,\n  Typography,\n  createStyles,\n  withStyles,\n} from '@material-ui/core'\n\nconst contractBasedAccountStyles = theme =>\n  createStyles({\n    actionArea: {\n      maxWidth: 300,\n    },\n    id: {\n      textOverflow: 'ellipsis',\n      overflow: 'hidden',\n    },\n  })\n\nconst ContractBasedAccount = ({ classes, id }) => (\n  <Grid item>\n    <Card>\n      <CardActionArea className={classes.actionArea}>\n        <CardContent>\n          <Typography variant=\"h6\" component=\"h3\" className={classes.id}>\n            {id}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n    </Card>\n  </Grid>\n)\n\nconst StyledContractBasedAccount = withStyles(contractBasedAccountStyles)(\n  ContractBasedAccount\n)\n\nconst contractBasedAccountsStyles = theme =>\n  createStyles({\n    title: {\n      marginTop: theme.spacing.unit * 2,\n    },\n  })\n\nconst ContractBasedAccounts = ({ classes, contractBasedAccounts }) => (\n  <Grid container direction=\"column\" spacing={16}>\n    <Grid item>\n      <Typography variant=\"title\" className={classes.title}>\n        Gnosis Safe\n      </Typography>\n      <Typography color=\"textSecondary\">\n        {contractBasedAccounts.length} contract-based accounts\n      </Typography>\n    </Grid>\n    <Grid item>\n      <Grid container direction=\"row\" spacing={16}>\n        {contractBasedAccounts.map(contractBasedAccount => (\n          <StyledContractBasedAccount\n            key={contractBasedAccount.id}\n            {...contractBasedAccount}\n          />\n        ))}\n      </Grid>\n    </Grid>\n  </Grid>\n)\n\nexport default withStyles(contractBasedAccountsStyles)(ContractBasedAccounts)\n","import React from 'react'\nimport {\n  Grid,\n  Select,\n  FormControlLabel,\n  MenuItem,\n  Checkbox,\n  createStyles,\n  withStyles,\n} from '@material-ui/core'\n\nconst filterStyles = theme =>\n  createStyles({\n    orderBySelect: {\n      marginLeft: theme.spacing.unit,\n    },\n  })\n\nconst Filter = ({\n  classes,\n  onToggleWithName,\n  onToggleWithImage,\n  onOrderBy,\n  withName,\n  withImage,\n  orderBy,\n}) => (\n  <Grid item>\n    <Grid container direction=\"row\">\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={withName}\n            onChange={event => onToggleWithName && onToggleWithName()}\n          />\n        }\n        label=\"With names\"\n      />\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={withImage}\n            onChange={event => onToggleWithImage && onToggleWithImage()}\n          />\n        }\n        label=\"With images\"\n      />\n      <FormControlLabel\n        control={\n          <Select\n            className={classes.orderBySelect}\n            value={orderBy}\n            onChange={event => onOrderBy && onOrderBy(event.target.value)}\n          >\n            <MenuItem value=\"id\">ID</MenuItem>\n          </Select>\n        }\n        label=\"Order By:\"\n        labelPlacement=\"start\"\n      />\n    </Grid>\n  </Grid>\n)\n\nconst StyledFilter = withStyles(filterStyles)(Filter)\n\nexport default StyledFilter\n","import React, { Component } from 'react'\nimport ApolloClient, { gql, InMemoryCache } from 'apollo-boost'\nimport { ApolloProvider, Query } from 'react-apollo'\nimport {\n  Grid,\n  LinearProgress,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  Button,\n} from '@material-ui/core'\nimport './App.css'\nimport Header from './components/Header'\nimport Error from './components/Error'\nimport ContractBasedAccounts from './components/ContractBasedAccounts'\nimport Filter from './components/Filter'\n\nif (!process.env.REACT_APP_GRAPHQL_ENDPOINT) {\n  throw new Error('REACT_APP_GRAPHQL_ENDPOINT environment variable not defined')\n}\n\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_GRAPHQL_ENDPOINT,\n  cache: new InMemoryCache(),\n})\n\nconst GRAVATARS_QUERY = gql`\n  query contractBasedAccounts(\n    $where: ContractBasedAccount_filter!\n    $orderBy: ContractBasedAccount_orderBy!\n  ) {\n    contractBasedAccounts(\n      first: 100\n      where: $where\n      orderBy: $orderBy\n      orderDirection: asc\n    ) {\n      id\n    }\n  }\n`\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      withImage: false,\n      withName: false,\n      orderBy: 'id',\n      showHelpDialog: false,\n    }\n  }\n\n  toggleHelpDialog = () => {\n    this.setState(state => ({\n      ...state,\n      showHelpDialog: !state.showHelpDialog,\n    }))\n  }\n\n  gotoQuickStartGuide = () => {\n    window.location.href = 'https://tasit.io'\n  }\n\n  render() {\n    const { withImage, withName, orderBy, showHelpDialog } = this.state\n\n    return (\n      <ApolloProvider client={client}>\n        <div className=\"App\">\n          <Grid container direction=\"column\">\n            <Header onHelp={this.toggleHelpDialog} />\n            <Filter\n              orderBy={orderBy}\n              withImage={withImage}\n              withName={withName}\n              onOrderBy={field =>\n                this.setState(state => ({ ...state, orderBy: field }))\n              }\n              onToggleWithImage={() =>\n                this.setState(state => ({\n                  ...state,\n                  withImage: !state.withImage,\n                }))\n              }\n              onToggleWithName={() =>\n                this.setState(state => ({\n                  ...state,\n                  withName: !state.withName,\n                }))\n              }\n            />\n            <Grid item>\n              <Grid container>\n                <Query\n                  query={GRAVATARS_QUERY}\n                  variables={{\n                    where: {},\n                    orderBy: orderBy,\n                  }}\n                >\n                  {({ data, error, loading }) => {\n                    return loading ? (\n                      <LinearProgress\n                        variant=\"query\"\n                        style={{ width: '100%' }}\n                      />\n                    ) : error ? (\n                      <Error error={error} />\n                    ) : (\n                      <ContractBasedAccounts\n                        contractBasedAccounts={data.contractBasedAccounts}\n                      />\n                    )\n                  }}\n                </Query>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Dialog\n            fullScreen={false}\n            open={showHelpDialog}\n            onClose={this.toggleHelpDialog}\n            aria-labelledby=\"help-dialog\"\n          >\n            <DialogTitle id=\"help-dialog\">{\"What's Tasit?\"}</DialogTitle>\n            <DialogContent>\n              <DialogContentText>\n                There's more info about the Tasit project over at tasit.io.\n                Should we take you there now?\n              </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={this.toggleHelpDialog} color=\"primary\">\n                Nah, I'm good\n              </Button>\n              <Button\n                onClick={this.gotoQuickStartGuide}\n                color=\"primary\"\n                autoFocus\n              >\n                Yes, please\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </div>\n      </ApolloProvider>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}