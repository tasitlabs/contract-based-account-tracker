{"version":3,"sources":["components/Header/Header.jsx","components/Error/Error.jsx","components/ContractBasedAccounts/ContractBasedAccounts.jsx","constants.js","components/Filter/Filter.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","_ref","onHelp","react_default","a","createElement","index_es","container","direction","alignItems","spacing","item","variant","aria-label","color","onClick","Help_default","withStyles","theme","createStyles","errorText","fontFamily","classes","error","component","className","id","mode","JSON","stringify","undefined","StyledContractBasedAccount","actionArea","maxWidth","textOverflow","overflow","timeCreated","window","open","concat","onPress","Date","parseInt","toString","title","marginTop","unit","_ref2","contractBasedAccounts","name","notes","length","map","contractBasedAccount","Object","assign","key","StyledFilter","orderBySelect","marginLeft","onOrderBy","orderBy","control","value","onChange","event","target","label","labelPlacement","clientDefault","ApolloClient","uri","process","cache","InMemoryCache","clientArgent","GNOSIS_SAFE_QUERY","gql","_templateObject","ARGENT_QUERY","_templateObject2","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleHelpDialog","setState","state","objectSpread","showHelpDialog","gotoQuickStartGuide","location","href","_this2","_this$state","react_apollo_esm","client","components_Header_Header","components_Filter_Filter","field","query","variables","where","first","data","loading","style","width","components_Error_Error","components_ContractBasedAccounts_ContractBasedAccounts","fullScreen","onClose","aria-labelledby","autoFocus","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d0cd59ed.chunk.js","sourcesContent":["import React from 'react'\nimport { Grid, Typography, IconButton } from '@material-ui/core'\nimport HelpIcon from '@material-ui/icons/Help'\n\nconst Header = ({ onHelp }) => (\n  <Grid container direction=\"row\" alignItems=\"center\" spacing={16}>\n    <Grid item>\n      <Typography variant=\"title\">\n        Contract-Based Account Tracker by Tasit\n      </Typography>\n    </Grid>\n    <Grid item>\n      <IconButton\n        aria-label=\"Delete\"\n        color=\"secondary\"\n        onClick={() => onHelp && onHelp()}\n      >\n        <HelpIcon />\n      </IconButton>\n    </Grid>\n  </Grid>\n)\n\nexport default Header\n","import React from 'react'\nimport { Grid, Typography, createStyles, withStyles } from '@material-ui/core'\n\nconst errorStyles = theme =>\n  createStyles({\n    errorText: {\n      fontFamily: 'Inconsolata, Monaco, monospace',\n    },\n  })\n\nconst Error = ({ classes, error }) => (\n  <Grid container direction=\"column\">\n    <Grid item>\n      <Typography variant=\"h6\" component=\"h3\" className={classes.id}>\n        Error\n      </Typography>\n    </Grid>\n    <Grid item>\n      <Grid container>\n        <Typography mode=\"paragraph\" color=\"secondary\">\n          <pre className={classes.errorText}>\n            {JSON.stringify(error, undefined, 2)}\n          </pre>\n        </Typography>\n      </Grid>\n    </Grid>\n  </Grid>\n)\n\nexport default withStyles(errorStyles)(Error)\n","import React from 'react'\nimport {\n  Card,\n  CardContent,\n  CardActionArea,\n  Grid,\n  Typography,\n  createStyles,\n  withStyles,\n} from '@material-ui/core'\n\nimport MAX_QUERY_AMOUNT from '../../constants'\n\nconst contractBasedAccountStyles = theme =>\n  createStyles({\n    actionArea: {\n      maxWidth: 300,\n    },\n    id: {\n      textOverflow: 'ellipsis',\n      overflow: 'hidden',\n    },\n  })\n\nconst onPress = id => {\n  window.open(`https://etherscan.io/address/${id}`, '_blank')\n}\n\nconst ContractBasedAccount = ({ classes, id, timeCreated }) => (\n  <Grid item>\n    <Card>\n      <CardActionArea\n        className={classes.actionArea}\n        onClick={() => {\n          onPress(id)\n        }}\n      >\n        <CardContent>\n          <Typography variant=\"h6\" component=\"h3\" className={classes.id}>\n            {id}\n          </Typography>\n          <Typography color=\"textSecondary\">\n            {new Date(parseInt(timeCreated, 10) * 1000).toString()}\n          </Typography>\n          {/* new Date(parseInt(timeCreated, 10)).toString() */}\n        </CardContent>\n      </CardActionArea>\n    </Card>\n  </Grid>\n)\n\nconst StyledContractBasedAccount = withStyles(contractBasedAccountStyles)(\n  ContractBasedAccount\n)\n\nconst contractBasedAccountsStyles = theme =>\n  createStyles({\n    title: {\n      marginTop: theme.spacing.unit * 2,\n    },\n  })\n\nconst ContractBasedAccounts = ({\n  classes,\n  contractBasedAccounts,\n  name,\n  notes,\n}) => (\n  <Grid container direction=\"column\" spacing={16}>\n    <Grid item>\n      <Typography variant=\"title\" className={classes.title}>\n        {name}\n      </Typography>\n      <Typography color=\"textSecondary\">\n        {contractBasedAccounts.length}\n        {contractBasedAccounts.length === MAX_QUERY_AMOUNT ? '+' : ''}{' '}\n        contract-based accounts\n      </Typography>\n      <Typography color=\"textSecondary\">{notes}</Typography>\n    </Grid>\n    <Grid item>\n      <Grid container direction=\"row\" spacing={16}>\n        {contractBasedAccounts.map(contractBasedAccount => (\n          <StyledContractBasedAccount\n            key={contractBasedAccount.id}\n            {...contractBasedAccount}\n          />\n        ))}\n      </Grid>\n    </Grid>\n  </Grid>\n)\n\nexport default withStyles(contractBasedAccountsStyles)(ContractBasedAccounts)\n","const MAX_QUERY_AMOUNT = 20\n\nexport default MAX_QUERY_AMOUNT\n","import React from 'react'\nimport {\n  Grid,\n  Select,\n  FormControlLabel,\n  MenuItem,\n  createStyles,\n  withStyles,\n} from '@material-ui/core'\n\nconst filterStyles = theme =>\n  createStyles({\n    orderBySelect: {\n      marginLeft: theme.spacing.unit,\n    },\n  })\n\nconst Filter = ({ classes, onOrderBy, orderBy }) => (\n  <Grid item>\n    <Grid container direction=\"row\">\n      <FormControlLabel\n        control={\n          <Select\n            className={classes.orderBySelect}\n            value={orderBy}\n            onChange={event => onOrderBy && onOrderBy(event.target.value)}\n          >\n            <MenuItem value=\"id\">ID</MenuItem>\n            <MenuItem value=\"timeCreated\">Time</MenuItem>\n          </Select>\n        }\n        label=\"Order By:\"\n        labelPlacement=\"start\"\n      />\n    </Grid>\n  </Grid>\n)\n\nconst StyledFilter = withStyles(filterStyles)(Filter)\n\nexport default StyledFilter\n","import React, { Component } from 'react'\nimport ApolloClient, { gql, InMemoryCache } from 'apollo-boost'\nimport { ApolloProvider, Query } from 'react-apollo'\nimport {\n  Grid,\n  LinearProgress,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  Button,\n} from '@material-ui/core'\nimport './App.css'\nimport Header from './components/Header'\nimport Error from './components/Error'\nimport ContractBasedAccounts from './components/ContractBasedAccounts'\nimport Filter from './components/Filter'\nimport MAX_QUERY_AMOUNT from './constants'\n\nif (!process.env.REACT_APP_GRAPHQL_ENDPOINT_GNOSIS_SAFE) {\n  throw new Error(\n    'REACT_APP_GRAPHQL_ENDPOINT_GNOSIS_SAFE environment variable not defined'\n  )\n}\n\nif (!process.env.REACT_APP_GRAPHQL_ENDPOINT_ARGENT) {\n  throw new Error(\n    'REACT_APP_GRAPHQL_ENDPOINT_ARGENT environment variable not defined'\n  )\n}\n\nconst clientDefault = new ApolloClient({\n  uri: process.env.REACT_APP_GRAPHQL_ENDPOINT_GNOSIS_SAFE,\n  cache: new InMemoryCache(),\n})\n\nconst clientArgent = new ApolloClient({\n  uri: process.env.REACT_APP_GRAPHQL_ENDPOINT_ARGENT,\n  cache: new InMemoryCache(),\n})\n\nconst GNOSIS_SAFE_QUERY = gql`\n  query contractBasedAccounts(\n    $where: ContractBasedAccount_filter!\n    $orderBy: ContractBasedAccount_orderBy!\n    $first: Int\n  ) {\n    contractBasedAccounts(\n      first: $first\n      where: $where\n      orderBy: $orderBy\n      orderDirection: desc\n    ) {\n      id\n      timeCreated\n    }\n  }\n`\n\nconst ARGENT_QUERY = gql`\n  query contractBasedAccounts(\n    $where: ContractBasedAccount_filter!\n    $orderBy: ContractBasedAccount_orderBy!\n    $first: Int\n  ) {\n    contractBasedAccounts(\n      first: $first\n      where: $where\n      orderBy: $orderBy\n      orderDirection: desc\n    ) {\n      id\n      timeCreated\n    }\n  }\n`\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      orderBy: 'timeCreated',\n      showHelpDialog: false,\n    }\n  }\n\n  toggleHelpDialog = () => {\n    this.setState(state => ({\n      ...state,\n      showHelpDialog: !state.showHelpDialog,\n    }))\n  }\n\n  gotoQuickStartGuide = () => {\n    window.location.href = 'https://tasit.io'\n  }\n\n  render() {\n    const { orderBy, showHelpDialog } = this.state\n\n    return (\n      <ApolloProvider client={clientDefault}>\n        <div className=\"App\">\n          <Grid container direction=\"column\">\n            <Header onHelp={this.toggleHelpDialog} />\n            <Filter\n              orderBy={orderBy}\n              onOrderBy={field =>\n                this.setState(state => ({ ...state, orderBy: field }))\n              }\n            />\n            <Grid item>\n              <Grid container>\n                <Query\n                  query={GNOSIS_SAFE_QUERY}\n                  variables={{\n                    where: {},\n                    orderBy: orderBy,\n                    first: MAX_QUERY_AMOUNT,\n                  }}\n                >\n                  {({ data, error, loading }) => {\n                    return loading ? (\n                      <LinearProgress\n                        variant=\"query\"\n                        style={{ width: '100%' }}\n                      />\n                    ) : error ? (\n                      <Error error={error} />\n                    ) : (\n                      <ContractBasedAccounts\n                        contractBasedAccounts={data.contractBasedAccounts}\n                        name={'Gnosis Safe'}\n                        notes={''}\n                      />\n                    )\n                  }}\n                </Query>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <Grid container>\n                <Query\n                  query={ARGENT_QUERY}\n                  client={clientArgent}\n                  variables={{\n                    where: {},\n                    orderBy: orderBy,\n                    first: MAX_QUERY_AMOUNT,\n                  }}\n                >\n                  {({ data, error, loading }) => {\n                    return loading ? (\n                      <LinearProgress\n                        variant=\"query\"\n                        style={{ width: '100%' }}\n                      />\n                    ) : error ? (\n                      <Error error={error} />\n                    ) : (\n                      <ContractBasedAccounts\n                        contractBasedAccounts={data.contractBasedAccounts}\n                        name={'Argent'}\n                        notes={''}\n                      />\n                    )\n                  }}\n                </Query>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Dialog\n            fullScreen={false}\n            open={showHelpDialog}\n            onClose={this.toggleHelpDialog}\n            aria-labelledby=\"help-dialog\"\n          >\n            <DialogTitle id=\"help-dialog\">{\"What's Tasit?\"}</DialogTitle>\n            <DialogContent>\n              <DialogContentText>\n                There's more info about the Tasit project over at tasit.io.\n                Should we take you there now?\n              </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={this.toggleHelpDialog} color=\"primary\">\n                Nah, I'm good\n              </Button>\n              <Button\n                onClick={this.gotoQuickStartGuide}\n                color=\"primary\"\n                autoFocus\n              >\n                Yes, please\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </div>\n      </ApolloProvider>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}